openapi: 3.0.4
info:
  title: GiftTracker API
  description: |
    This is the official API documentation for the GiftTracker backend system.
    It allows users to manage people, occasions, and gift ideas efficiently.
  version: 1.0.0
servers:
  - url: https://psychic-space-capybara-g47qqv9g5rvp29v9r-3001.app.github.dev
paths:
  /v1/:
    get:
      summary: Root endpoint
      description: Returns basic information about the GiftTracker API.
      responses:
        "200":
          description: Info object
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: string

  /v1/people:
    get:
      summary: Get all people (non-eliminated)
      responses:
        "200":
          description: List of people
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Person"
    post:
      summary: Add a new person
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PersonInput"
            example:
              f_name: "Anna"
              l_name: "Ivanova"
              relationship: "Family"
              phone: "416-555-7890"
              email: "anna@example.com"
      responses:
        "200":
          description: Person added confirmation

  /v1/people/{id}:
    get:
      summary: Get one person by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Single person object
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    $ref: "#/components/schemas/Person"

  /v1/people/search:
    get:
      summary: Search people by name (non-eliminated)
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Filtered person list
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Person"

  /v1/people/update:
    put:
      summary: Update a person's full info by name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PersonInput"
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Person updated

  /v1/people/eliminate-by-info:
    put:
      summary: Soft delete a person by name and relationship
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [f_name, l_name, relationship]
              properties:
                f_name:
                  type: string
                l_name:
                  type: string
                relationship:
                  type: string
      responses:
        "200":
          description: Person marked as eliminated

  /v1/people/relationship/{type}:
    get:
      summary: Filter people by relationship type
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of people with specified relationship
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Person"

  /v1/gifts:
    get:
      summary: Get all gifts
      responses:
        "200":
          description: Gift list
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/GiftDetail"
    post:
      summary: Add a gift
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GiftInput"
      responses:
        "200":
          description: Gift added

  /v1/gifts/{id}:
    get:
      summary: Get gift details by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Gift details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    $ref: "#/components/schemas/GiftFull"
    put:
      summary: Update gift by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GiftInput"
      responses:
        "200":
          description: Gift update confirmation

  /v1/occasions/names:
    get:
      summary: List all unique occasion names
      responses:
        "200":
          description: Occasion names
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      type: string

  /v1/occasions/timeline:
    get:
      summary: Get upcoming occasions timeline
      responses:
        "200":
          description: Timeline list
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        occasion_date:
                          type: string
                        occasion_name:
                          type: string
                        person_name:
                          type: string

  /v1/occasions:
    post:
      summary: Add a new occasion for active person
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OccasionInput"
      responses:
        "200":
          description: Occasion added

components:
  schemas:
    Person:
      type: object
      properties:
        f_name:
          type: string
        l_name:
          type: string
        relationship:
          type: string
        phone:
          type: string
        email:
          type: string

    PersonInput:
      type: object
      required: [f_name, l_name, relationship, phone, email]
      properties:
        f_name:
          type: string
          example: "Anna"
        l_name:
          type: string
          example: "Ivanova"
        relationship:
          type: string
          example: "Family"
        phone:
          type: string
          example: "416-555-7890"
        email:
          type: string
          example: "anna@example.com"

    OccasionInput:
      type: object
      required: [person_id, occasion_name, occasion_date]
      properties:
        person_id:
          type: integer
          example: 3
        occasion_name:
          type: string
          example: "Birthday"
        occasion_date:
          type: string
          format: date
          example: "2025-04-08"

    GiftInput:
      type: object
      required:
        [
          occasion_id,
          gift_name,
          gift_description,
          approx_gift_price,
          status,
          feedback,
        ]
      properties:
        occasion_id:
          type: integer
          example: 1
        gift_name:
          type: string
          example: "Gold Necklace"
        gift_description:
          type: string
          example: "A delicate 18k gold necklace for Anna"
        approx_gift_price:
          type: number
          example: 150
        status:
          type: string
          example: "Planned"
        feedback:
          type: string
          example: "She loved it!"

    GiftDetail:
      type: object
      properties:
        gift_name:
          type: string
        gift_description:
          type: string

    GiftFull:
      type: object
      properties:
        gift_id:
          type: integer
        gift_name:
          type: string
        gift_description:
          type: string
        approx_gift_price:
          type: number
        status:
          type: string
        feedback:
          type: string
        occasion:
          type: object
          properties:
            date:
              type: string
            name:
              type: string
        recipient:
          type: object
          properties:
            first_name:
              type: string
            last_name:
              type: string
