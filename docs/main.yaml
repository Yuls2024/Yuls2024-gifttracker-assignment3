openapi: 3.0.4
info:
  title: GiftTracker API
  description: |
    This is the official API documentation for the GiftTracker backend system.
    It allows users to manage people, occasions, and gift ideas efficiently.
  version: 1.0.0
servers:
  - url: https://{url}
    variables: 
      url: 
       default: psychic-space-capybara-g47qqv9g5rvp29v9r-3001.app.github.dev/


paths:
  # This API works, but not useful for what I'm doing
  # /v1/:
  #   get:
  #     summary: Root endpoint
  #     description: Returns basic information about the GiftTracker API.
  #     responses:
  #       "200":
  #         description: Info object
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 info:
  #                   type: string

# 1) This works
  /v1/people:
    get:
      summary: Get a list of all people 
      description: Displays a list of all people in the database; their names and how they are related to me.
      responses:
        "200":
          description: List of people


    post:
      summary: Add a new person
      description: Add a new person to the list
      parameters:
       - name: id
         in: query
         description: ID of user
         schema:
          type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PersonInput"
            example:
              f_name: "Channing"
              l_name: "Tatum"
              relationship: "Favorite Artist"
              phone: "555-999-1010"
              email: "channing.tatum@example.com"
      responses:
        "200":
          description: Person added confirmation

# 2)??? This works
  /v1/people/{id}:
    get:
      summary: Get one person by ID
      description: Find a person in the database using a specific ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Single person information


  /v1/people/search:
   get:
    summary: Search by name or by a letter 
    description: Searches by first few letters of the name or by first or last name
    parameters:
      - name: name
        in: query
        required: true
        schema:
          type: string
          example: "Mylove"
    responses:
      '200':
        description: A list of matching people.
      '400':
        description: Bad request due to missing or empty 'name' parameter.
      '404':
        description: No matching people found.



  /v1/people/update:
    put:
      summary: Update a person's full info by first and last name (exact match)
      description: Updates a person only if both first and last name match exactly (case-insensitive).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PersonInput"
            example:
              f_name: "Channing"
              l_name: "Tatum"
              relationship: "Favorite Artist"
              phone: "555-999-1010"
              email: "channing.updated@example.com"
      responses:
        "200":
          description: Person updated successfully
        "400":
          description: Multiple people matched — please specify person_id
        "404":
          description: No exact match found
        

  /v1/people/update-by-info:
    put:
      summary: Update a person's info by name and relationship
      description: Updates a person using first name, last name, and relationship. Fails if no match or multiple matches.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [f_name, l_name, relationship, phone, email]
              properties:
                f_name:
                  type: string
                  example: "Channing"
                l_name:
                  type: string
                  example: "Tatum"
                relationship:
                  type: string
                  example: "Boyfriend"
                phone:
                  type: string
                  example: "555-111-2222"
                email:
                  type: string
                  example: "channing.new@example.com"
      responses:
        "200":
          description: Person updated successfully
        "400":
          description: Multiple people matched — please specify person_id
        "404":
          description: No matching person found


  /v1/people/eliminate-by-info:
    put:
      summary: Soft delete a person by name and relationship
      description: Marks a person as eliminated based on exact match of first name, last name, and relationship.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [f_name, l_name, relationship]
              properties:
                f_name:
                  type: string
                l_name:
                  type: string
                relationship:
                  type: string
            example:
              f_name: "Channing"
              l_name: "Tatum"
              relationship: "Boyfriend"
      responses:
        "200":
          description: Person marked as eliminated
        "400":
          description: Multiple people matched — please provide person_id
        "404":
          description: Person not found or already eliminated

  /v1/people/relationship/{type}:
    get:
      summary: Filter people by relationship type
      description: Filter people by how they are related to me
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            example: "Family"
      responses:
        "200":
          description: List of people by their relation to me


  /v1/gifts:
    get:
      summary: Get all gifts
      description: All the gifts from the Gifts table
      responses:
        "200":
          description: Gift list


    
    post:
      summary: Add a gift
      requestBody:
       required: true
       content:
        application/json:
          schema:
            $ref: "#/components/schemas/GiftInput"
          example:
            occasion_id: 3
            gift_name: "Smart Watch"
            gift_description: "Fitness tracker with GPS and heart rate monitor"
            approx_gift_price: 120
            status: "Given"
            feedback: "He uses it every day!"

      responses:
        "200":
          description: Gift added

  /v1/gifts/{id}:
    get:
      summary: Get gift details by ID
      description: Displays all gift info, status, date, to whom it was given, if given & feedback
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          example: 2

      responses:
        "200":
          description: Gift details

    put:
      summary: Update gift by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GiftInput"
      responses:
        "200":
          description: Gift update confirmation

  /v1/occasions/names:
    get:
      summary: List all unique occasion names
      description: Displays a list of all occasion names
      responses:
        "200":
          description: Occasion names


  /v1/occasions/timeline:
    get:
      summary: Get upcoming occasions timeline
      description: Shows a list of upcoming dates, occasions and people they are associated with
      responses:
        "200":
          description: List of upcoming occasion dates

  /v1/occasions:
    post:
      summary: Add a new occasion for active person
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OccasionInput"
            example:
             person_id: 3
             occasion_name: "Anniversary"
             occasion_date: "2025-09-10"
      responses:
        "200":
          description: Occasion added

components:
  schemas:
    Person:
      type: object
      properties:
        f_name:
          type: string
        l_name:
          type: string
        relationship:
          type: string
        phone:
          type: string
        email:
          type: string
      example:
        f_name: "Laura"
        l_name: "Mylove"
        relationship: "Friend"
        phone: "902-45-7634"
        email: "laura@mylove.com"

    PersonList:
      type: object
      properties:
        f_name:
          type: string
        l_name:
          type: string
        relationship:
          type: string
      example:
        f_name: "Laura"
        l_name: "Mylove"
        relationship: "Friend"
           


    PersonInput:
      type: object
      required: [f_name, l_name, relationship, phone, email]
      properties:
        f_name:
          type: string
          example: "Channing"
        l_name:
          type: string
          example: "Tatum"
        relationship:
          type: string
          example: "Boyfriend"
        phone:
          type: string
          example: "333-999-4444"
        email:
          type: string
          example: "channing.tatum@example.com"

    OccasionInput:
      type: object
      required: [person_id, occasion_name, occasion_date]
      properties:
        person_id:
          type: integer
          example: 3
        occasion_name:
          type: string
          example: "Birthday"
        occasion_date:
          type: string
          format: date
          example: "2025-04-08"

    GiftInput:
      type: object
      required:
        [
          occasion_id,
          gift_name,
          gift_description,
          approx_gift_price,
          status,
          feedback,
        ]
      properties:
        occasion_id:
          type: integer
          example: 1
        gift_name:
          type: string
          example: "Gold Necklace"
        gift_description:
          type: string
          example: "A delicate 18k gold necklace"
        approx_gift_price:
          type: number
          example: 150
        status:
          type: string
          example: "Planned"
        feedback:
          type: string
          example: "She loved it!"

    GiftDetail:
      type: object
      properties:
        gift_name:
          type: string
        gift_description:
          type: string
      example:
        gift_name: "Gold Necklace"
        gift_description: "A delicate 18k gold necklace"


    

    GiftFull:
      type: object
      properties:
        gift_id:
          type: integer
        gift_name:
          type: string
        gift_description:
          type: string
        approx_gift_price:
          type: number
        status:
          type: string
        feedback:
          type: string
        occasion:
          type: object
          properties:
            date:
              type: string
            name:
              type: string
        recipient:
          type: object
          properties:
            first_name:
              type: string
            last_name:
              type: string
      example:
        gift_id: 4
        gift_name: "Smart Watch"
        gift_description: "Fitness tracker with GPS and heart rate monitor"
        approx_gift_price: 120
        status: "Given"
        feedback: "He uses it every day!"
        occasion:
          date: "2025-05-20"
          name: "Graduation"
        recipient:
          first_name: "Danila"
          last_name: "Kozlov"
